plugins {
    id 'java'
}

group = 'com.snowflake'
version = '1.0-SNAPSHOT'

ext {
    sdkVersion = System.getenv("SDK_VERSION") ?: '+'
}

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    compileOnly "com.snowflake:connectors-native-sdk:$sdkVersion"
    testImplementation 'org.junit.jupiter:junit-jupiter:5.11.3'
    testImplementation "com.snowflake:connectors-native-sdk-test:$sdkVersion"
}

test {
    useJUnitPlatform()
}

/**
 * Copyright (c) 2024 Snowflake Inc.
 *
 * **********************************************
 *           CONNECTOR LIFECYCLE TASKS
 * **********************************************
 */
import java.util.function.Supplier

String defaultBuildDir = './sf_build'
String defaultSrcDir = './application_package'
String libraryName = 'connectors-native-sdk'
String defaultArtifactName = "${project.name}.jar"
String sdkComponentsDirName = 'connectors-sdk-components'

project.tasks.register("copyInternalComponents") {
    it.group = 'Snowflake'
    it.description = "Copies jar artifact and all files from directory that contains internal custom connector components to connector build directory."
    doLast() {
        copyInternalComponents(defaultSrcDir, defaultArtifactName, defaultBuildDir)
    }
}

project.tasks.register('copySdkComponents') {
    it.group = 'Snowflake'
    it.description = "Copies .sql files from ${sdkComponentsDirName} directory to the connector build file."
    doLast {
        copySdkComponents(libraryName, defaultBuildDir, sdkComponentsDirName)
    }
}

/*
* **********************************************
*              TASK MAIN LOGIC
* **********************************************
*/

private void copyInternalComponents(String defaultSrcDir, String defaultArtifactName, String defaultBuildDir) {
    TaskLogger.info("Starting 'copyInternalComponents' task...")
    def localSrcDir = getCommandArgument('srcDir', {defaultSrcDir})
    def artifact = getCommandArgument('artifact', {defaultArtifactName})
    def targetDir = getCommandArgument('targetDir', {defaultBuildDir})

    Utils.isDirectoryOrExit(localSrcDir)
    buildLocalJavaArtifact()
    copyLocalJavaArtifact(artifact, targetDir)

    project.copy {
        TaskLogger.info("Copying all files from local source directory [${defaultSrcDir}] to connector build directory [$targetDir].")
        from layout.projectDirectory.dir(localSrcDir.replace("./", ""))
        into layout.projectDirectory.dir(targetDir.replace("./", ""))
    }
    TaskLogger.success("Local projects' jar artifact and all files from [${localSrcDir}] copied to [$defaultBuildDir] directory.")
}

private void copySdkComponents(String libraryName, String defaultBuildDir, String sdkComponentsDirName) {
    TaskLogger.info("Starting 'copySdkComponents' task...")
    def targetDir = getCommandArgument('targetDir', {defaultBuildDir})

    try {
        project.copy {
            TaskLogger.info("Copying [${sdkComponentsDirName}] directory with .sql files to '${targetDir}'")
            from project.zipTree(project.configurations.compileClasspath.find {
                it.name.startsWith(libraryName)})
            into targetDir
            include "${sdkComponentsDirName}/**"
        }
    } catch (IllegalArgumentException e) {
        Utils.exitWithErrorLog("Unable to find [${libraryName}] in the compile classpath. Make sure that the library is " +
            "published to Maven local repository and the proper dependency is added to the build.gradle file.")
    }
    project.copy {
        TaskLogger.info("Copying [${libraryName}] jar file to [${targetDir}]")
        from configurations.compileClasspath.find {
            it.name.startsWith(libraryName)
        }
        into targetDir
        rename ("^.*${libraryName}.*\$", "${libraryName}.jar")
    }
    TaskLogger.success("Copying sdk components finished successfully.")
}

/*
* **********************************************
*                 TASK UTILS
* **********************************************
*/

private void copyLocalJavaArtifact(String artifact, String targetDir) {
    project.copy {
        String originalArtifactName = "${project.name}-${project.version}.jar"
        TaskLogger.info("Copying jar artifact [$originalArtifactName] of local project to [${targetDir}] as [$artifact].")
        from layout.projectDirectory.file("build/libs/${originalArtifactName}")
        into layout.projectDirectory.dir(targetDir.replace("./", ""))
        rename ("^.*${project.name}-${project.version}.jar.*\$", artifact)
    }
}

private void buildLocalJavaArtifact() {
    TaskLogger.info("Building local jar artifact from local project.")
    var process = new ProcessBuilder(["./gradlew", "build"]).redirectErrorStream(true).start()
    Utils.executeCommand(process, "BUILD FAILED in", {Utils.exitWithErrorLog("Gradle build failed. Cannot create a jar artifact.")})
}

private String getCommandArgument(String propertyName, Supplier<String> defaultValue) {
    return project.hasProperty(propertyName) ?
        project.property(propertyName) : defaultValue.get()
}

class TaskLogger {

    private static String redText = "\u001B[31m"
    private static String lightBlueText = "\u001B[96m"
    private static String greenText = "\u001B[92m"
    private static String blueText = "\u001B[36m"
    private static String yellowText = "\u001B[93m"
    private static String defaultText = "\u001B[0m"

    static void error(String log) {
        println("${redText}[ERROR]: ${log}${defaultText}")
    }

    static void info(String log) {
        println("${lightBlueText}[INFO]: ${log}${defaultText}")
    }

    static void success(String log) {
        println("${greenText}[SUCCESS]: ${log}${defaultText}")
    }

    static void external(String log) {
        println("${blueText}[EXTERNAL_LOG]: ${log}${defaultText}")
    }

    static void input(String log) {
        println("${yellowText}[INPUT_REQUIRED]: ${log}${defaultText}")
    }
}

class Utils {

    static void isDirectoryOrExit(String path) {
        File buildDir = new File(path)
        if (!buildDir.isDirectory() || !buildDir.exists()) {
            exitWithErrorLog("File [${buildDir}] does not exist or is not a directory.")
        }
    }

    static void exitWithErrorLog(String log) {
        TaskLogger.error(log)
        TaskLogger.error("Task execution failed.")
        throw new NativeSdkTaskException(log)
    }

    static List<String> executeCommand(Process command, String errorLine, Runnable onErrorAction) {
        var reader = new BufferedReader(new InputStreamReader(command.getInputStream()))
        List<String> commandOutput = new LinkedList<>()
        String line
        boolean encounteredError
        while ((line = reader.readLine()) != null) {
            TaskLogger.external(line)
            commandOutput.add(line)
            if (line.contains(errorLine)) {
                encounteredError = true
            }
        }
        if (encounteredError) {
            onErrorAction.run()
        }
        return commandOutput
    }
}

class NativeSdkTaskException extends RuntimeException {
    NativeSdkTaskException(String message) {
        super(message)
    }
}
