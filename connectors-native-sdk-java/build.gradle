import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'idea'
    id 'java-library'
}

group 'com.snowflake'
version '2.2.1-SNAPSHOT'

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11

    withSourcesJar()
    withJavadocJar()
}

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    compileOnlyApi 'com.snowflake:snowpark:1.14.0'
    compileOnlyApi 'com.snowflake:telemetry:0.1.0'

    testImplementation project(':connectors-native-sdk-test')
    testImplementation 'org.junit.platform:junit-platform-launcher:1.11.3'
    testImplementation 'org.mockito:mockito-core:5.14.2'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.14.2'
    testImplementation 'com.tngtech.archunit:archunit-junit5:1.3.0'
    testImplementation 'org.slf4j:slf4j-simple:2.0.16'
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    from(sourceSets.main.resources.srcDirs) {
        filter(ReplaceTokens, tokens: [
            snowpark: 'com.snowflake:snowpark:1.14.0',
            java_jar: '/connectors-native-sdk.jar',
            telemetry: 'com.snowflake:telemetry:0.1.0'
        ])
    }
}

sourceSets {
    testFixtures {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
    appTest {
        compileClasspath += sourceSets.main.output
        compileClasspath += sourceSets.testFixtures.output
        runtimeClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.testFixtures.output
    }
    intTest {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
    upgradeTest {
        compileClasspath += sourceSets.main.output
        compileClasspath += sourceSets.testFixtures.output
        runtimeClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.testFixtures.output
    }
    benchmark {
        compileClasspath += sourceSets.main.output
        compileClasspath += sourceSets.testFixtures.output
        runtimeClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.testFixtures.output
    }
}

idea {
    module {
        sourceDirs += file('testFixtures')
        resourceDirs += files('testFixtures/resources')

        testSources.from(sourceSets.appTest.java.srcDirs)
        testResources.from(sourceSets.appTest.resources.srcDirs)

        testSources.from(sourceSets.intTest.java.srcDirs)
        testResources.from(sourceSets.intTest.resources.srcDirs)

        testSources.from(sourceSets.upgradeTest.java.srcDirs)
        testResources.from(sourceSets.upgradeTest.resources.srcDirs)

        testSources.from(sourceSets.benchmark.java.srcDirs)
        testResources.from(sourceSets.benchmark.resources.srcDirs)
    }
}

configurations {
    testImplementation.extendsFrom compileOnlyApi

    testFixturesImplementation.extendsFrom testImplementation
    testFixturesRuntimeOnly.extendsFrom runtimeOnly

    appTestImplementation.extendsFrom testImplementation
    appTestRuntimeOnly.extendsFrom runtimeOnly

    intTestImplementation.extendsFrom testImplementation
    intTestRuntimeOnly.extendsFrom runtimeOnly

    upgradeTestImplementation.extendsFrom testImplementation
    upgradeTestRuntimeOnly.extendsFrom runtimeOnly

    benchmarkImplementation.extendsFrom testImplementation
    benchmarkRuntimeOnly.extendsFrom runtimeOnly
}

javadoc {
    options {
        links(
            'https://docs.oracle.com/en/java/javase/11/docs/api/',
            'https://docs.snowflake.com/developer-guide/snowpark/reference/java/',
            'https://www.javadoc.io/doc/com.fasterxml.jackson.core/jackson-databind/2.13.4/index.html'
        )
    }
}

test {
    jvmArgs '--add-opens=java.base/java.nio=ALL-UNNAMED'
    systemProperties = [
        'junit.jupiter.execution.parallel.enabled': true,
        'junit.jupiter.execution.parallel.mode.default': 'SAME_THREAD',
        'junit.jupiter.execution.parallel.mode.classes.default': 'CONCURRENT',
        'junit.jupiter.execution.parallel.config.strategy': 'DYNAMIC'
    ]

    useJUnitPlatform()
}

tasks.register('intTest', Test) {
    description = 'Runs integration tests'
    group = 'verification'

    testClassesDirs = sourceSets.intTest.output.classesDirs
    classpath = sourceSets.intTest.runtimeClasspath

    systemProperties = [
        'junit.jupiter.execution.parallel.enabled': true,
        'junit.jupiter.execution.parallel.mode.default': 'SAME_THREAD',
        'junit.jupiter.execution.parallel.mode.classes.default': 'CONCURRENT',
        'junit.jupiter.execution.parallel.config.strategy': 'DYNAMIC',
        'configurationFile': System.getProperty('configurationFile', '../deployment/snowflake.toml'),
        'snowpark': System.getProperty('snowpark', 'com.snowflake:snowpark:1.14.0'),
        'java_jar': System.getProperty('java_jar', '/connectors-native-sdk.jar'),
        'telemetry': System.getProperty('telemetry', 'com.snowflake:telemetry:0.1.0'),
    ]

    jvmArgs '--add-opens=java.base/java.nio=ALL-UNNAMED'
    useJUnitPlatform()
}

tasks.register('appTest', Test) {
    description = 'Runs integration tests in application.'
    group = 'verification'

    testClassesDirs = sourceSets.appTest.output.classesDirs
    classpath = sourceSets.appTest.runtimeClasspath

    systemProperties = [
        'junit.jupiter.execution.parallel.enabled': true,
        'junit.jupiter.execution.parallel.mode.default': 'SAME_THREAD',
        'junit.jupiter.execution.parallel.mode.classes.default': 'CONCURRENT',
        'junit.jupiter.execution.parallel.config.strategy': 'DYNAMIC',
        'configurationFile': System.getProperty(
            'configurationFile',
            '../deployment/snowflake.toml'
        )
    ]

    jvmArgs '--add-opens=java.base/java.nio=ALL-UNNAMED'
    useJUnitPlatform()
}

tasks.register('upgradeTest', Test) {
    description = 'Runs upgrade tests in application.'
    group = 'verification'

    testClassesDirs = sourceSets.upgradeTest.output.classesDirs
    classpath = sourceSets.upgradeTest.runtimeClasspath

    systemProperties = [
        'junit.jupiter.execution.parallel.enabled': true,
        'junit.jupiter.execution.parallel.mode.default': 'SAME_THREAD',
        'junit.jupiter.execution.parallel.mode.classes.default': 'CONCURRENT',
        'junit.jupiter.execution.parallel.config.strategy': 'DYNAMIC',
        'configurationFile': System.getProperty(
            'configurationFile',
            '../deployment/snowflake.toml'
        )
    ]

    jvmArgs '--add-opens=java.base/java.nio=ALL-UNNAMED'
    useJUnitPlatform()
}

tasks.register('benchmarkTest', Test) {
    description = 'Runs benchmarks in application.'
    group = 'verification'

    testClassesDirs = sourceSets.benchmark.output.classesDirs
    classpath = sourceSets.benchmark.runtimeClasspath

    systemProperty 'configurationFile', System.getProperty(
        'configurationFile',
        '../deployment/snowflake.toml',
    )

    jvmArgs '--add-opens=java.base/java.nio=ALL-UNNAMED'
    useJUnitPlatform()
}
